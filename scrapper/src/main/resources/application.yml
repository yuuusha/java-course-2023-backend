app:
  scheduler:
    enable: true
    interval: 10s
    force-check-delay: 10s
    max-links-per-check: 100
  github-token: ${GITHUB_TOKEN}
  database-access-type: jpa
  kafka-configuration-info:
    topic-name: updates
  use-queue: true

supplier:
  github:
    url: "https://api.github.com/"
    patterns:
      repository: "https://github.com/(.+)/(.+)"
  stackoverflow:
    url: "https://api.stackexchange.com/2.3"
    patterns:
      questions: "https://stackoverflow.com/questions/(\\d+).*"

spring:
  application:
    name: scrapper
  liquibase:
    enabled: false
  datasource:
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: validate
    open-in-view: false
  cache:
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    cache-names:
      - rate-limit-bucket

  kafka:
    bootstrap-servers: localhost:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      bootstrap-servers: localhost:29092
      properties:
        spring.json.add.type.headers: false


server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  swagger-ui:
    path: /swagger-ui

bot:
  url: http://localhost:8090

retry-query:
  targets:
    github:
      type: exponential
      max-attempts: 5
      min-delay: 1s
      max-delay: 10s
      codes: 429
    stackoverflow:
      type: fixed
      max-attempts: 5
      min-delay: 1s
      max-delay: 10s
      codes: 429
    bot:
      type: linear
      max-attempts: 5
      min-delay: 5s
      codes: 429

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-bucket
      url: .*
      http-status-code: too_many_requests
      rate-limits:
        - bandwidths:
            - capacity: 1000
              time: 1
              unit: hours
              refill-speed: interval
          cache-key: getRemoteAddr()
          skip-condition: '@rateLimiterService.isSkipped(getRemoteAddr())'

rate-limiter:
  whitelist: ${WHITELISTED_IPS:localhost}

management:
  metrics:
    tags:
      application: ${spring.application.name}
  server:
    port: 8000
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
      path-mapping:
        prometheus: /metrics
      base-path: '/'
