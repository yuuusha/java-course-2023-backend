app:
  telegram-token: ${TELEGRAM_API_KEY}
  kafka-configuration-info:
    topic-name: updates

spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  cache:
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    cache-names:
      - rate-limit-bucket
  kafka:
    consumer:
      bootstrap-servers: localhost:29092
      group-id: bot
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: edu.java.bot.dto.request.LinkUpdate
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
      bootstrap-servers: localhost:29092
    bootstrap-servers: localhost:29092

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  swagger-ui:
    path: /swagger-ui

scrapper:
  url: http://localhost:8080

retry-query:
  retries:
    - target: scrapper
      type: exponential
      max-attempts: 5
      min-delay: 1s
      max-delay: 10s
      codes: 500

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-bucket
      url: .*
      http-status-code: too_many_requests
      rate-limits:
        - bandwidths:
            - capacity: 1000
              time: 1
              unit: hours
              refill-speed: interval
          cache-key: getRemoteAddr()
          skip-condition: '@rateLimiterService.isSkipped(getRemoteAddr())'

rate-limiter:
  whitelist: ${WHITELISTED_IPS:localhost}
